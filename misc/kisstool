#!/usr/bin/env python3

import argparse
import codecs
import collections
import contextlib
import itertools
import os.path
import struct
import sys
import unicodedata


def main():
    parser = argparse.ArgumentParser()
    parser.set_defaults(func=help_command)
    parser.add_argument("-f", "--file")
    parser.add_argument("-s", "--save")
    subparsers = parser.add_subparsers(dest="command")

    def sub(name, func, **kwds):
        parser = subparsers.add_parser(name, **kwds)
        parser.set_defaults(func=func)
        return parser

    sub("help", func=help_command, help="Show help")
    sub("info", func=info_command, help="Show user info from save file")
    sub("list", func=list_command, help="List file entries in save file")
    sub("move", func=move_command, help="Move file entry within save file")
    get = sub("get", func=get_command, help="Extract local file from save file")
    add = sub("add", func=add_command, help="Insert local file into save file")
    sub("del", func=del_command, help="Delete file entry from save file")

    add.add_argument("path")
    get.add_argument("title")
    get.add_argument("-o", "--out")

    args = parser.parse_args()
    args.func(parser, args)


KissMeta = collections.namedtuple("KissMeta", "cap bank addr".split())
KissChunk = collections.namedtuple("KissChunk", "type body prev next".split())
KissEntry = collections.namedtuple("KissEntry", "addr medium owner".split())
KissFile = collections.namedtuple(
    "KissFile", "body size flags owner title icon".split()
)


class KissError(Exception):
    pass


@contextlib.contextmanager
def open_sav(args, mode):
    rom_path = args.file
    sav_path = args.save

    if not (rom_path or sav_path):
        raise ValueError("at least one of --file or --save is required")

    if not sav_path:
        rom_base, ext = os.path.splitext(rom_path)
        sav_path = rom_base + ".sav"

    if rom_path:
        with open(rom_path, "rb") as f:
            f.seek(0x14)
            meta = KissMeta(*read_struct("<BBH", f))
        with open(sav_path, mode) as f:
            yield meta, f
    else:
        with open(sav_path, mode) as f:
            yield detect_meta(f), f


def gb2cram(bank, addr):
    """Convert addr in CRAM memory space to Game Boy space"""
    return (bank << 13) + (addr - 0xA000)


def cram2gb(addr):
    """Convert addr in Game Boy memory space to CRAM space"""
    return (addr >> 13), ((addr % 0x2000) + 0xA000)


def read_struct(fmt, file):
    return struct.unpack(fmt, file.read(struct.calcsize(fmt)))


ICON_SIZE_2BPP = 0xC0
ICON_SIZE_1BPP = 0x60
BUILTIN_ICONS = {
    0x00: "text",
    0x01: "auto",
    0x81: "auto",
    0x40: "auto",
    0x41: "auto",
    0x42: "auto",
    0x43: "auto",
    0x44: "auto",
    0x45: "auto",
    0xFF: "auto",
}


def detect_meta(sav):
    data = sav.read()
    offset = 0
    magic = b"\x53\xac"
    cram_addr = None
    while offset < len(data):
        try:
            i = data.index(magic, offset)
        except ValueError:
            break
        offset = i + 2
        index_header = i
        index_next = index_header + 4
        profile_header = i + 486
        profile_prev = profile_header + 2
        profile_end = profile_header + 128
        if profile_end > len(data):
            break

        (index_next,) = struct.unpack("<H", data[index_next : index_next + 2])
        (profile_prev,) = struct.unpack("<H", data[profile_prev : profile_prev + 2])
        if (
            (data[profile_header : profile_header + 2] == magic)
            and (cram2gb(index_header)[1] == profile_prev)
            and (cram2gb(profile_header)[1] == index_next)
        ):
            cram_addr = profile_header
            break

    if cram_addr is None:
        raise Exception("GBKiss data not found in save file")
    bank, addr = cram2gb(cram_addr)
    return KissMeta(None, bank, addr)


def read_chunk_header(sav, *, seek=None):
    if seek is not None:
        sav.seek(seek)
    ctype, inv_ctype, prevc, nextc = read_struct("<BBHH", sav)
    assert (ctype ^ inv_ctype) == 0xFF
    return KissChunk(ctype, sav.tell(), prevc, nextc)


def read_profile_chunk_header(sav, *, seek=None):
    profile = read_chunk_header(sav, seek=seek)
    assert profile.type == 0x53
    assert (profile.next % 0x2000) == 0
    _, addr = cram2gb(profile.body)
    assert (addr - profile.prev) == 492
    return profile


def read_index_chunk_header(sav, *, seek=None):
    index = read_chunk_header(sav, seek=seek)
    assert index.type == 0x53
    return index


def read_index(sav, *, seek=None):
    _ = read_index_chunk_header(sav, seek=seek)
    entries = []
    for i in range(120):
        entries.append(KissEntry(*read_struct("<HBB", sav)))
    return entries


def read_file_header(sav, *, seek=None):
    if seek is not None:
        sav.seek(seek)
    size, flags, reserved, header_size, owner = read_struct("<HBBBB", sav)
    assert reserved == 0
    icon_size = {
        0x10: ICON_SIZE_1BPP,
        0x18: ICON_SIZE_2BPP,
    }.get(flags & 0x18, 0)
    title = sav.read(header_size - icon_size - 1).decode("gbkiss_string")
    icon = None
    if icon_size:
        icon = sav.read(icon_size)
    return KissFile(sav.tell(), size, flags, owner, title, icon)


def help_command(parser, args):
    parser.print_help()


def info_command(parser, args):
    with open_sav(args, "rb") as (meta, sav):
        profile = read_profile_chunk_header(sav, seek=gb2cram(meta.bank, meta.addr))

        profile = sav.read(122)
        name = profile[64:74].decode("gbkiss_char").rstrip()
        number = profile[74:86].decode("gbkiss_char").rstrip()
        memo = [
            profile[86:98].decode("gbkiss_char").rstrip(),
            profile[98:110].decode("gbkiss_char").rstrip(),
            profile[110:122].decode("gbkiss_char").rstrip(),
        ]
        while memo and not memo[-1]:
            memo.pop()

        print(f"NAME: {name}")
        print(f"NUM:  {number}")
        print("MEMO: " + "\n      ".join(memo))


def list_command(parser, args):
    with open_sav(args, "rb") as (meta, sav):
        profile = read_profile_chunk_header(sav, seek=gb2cram(meta.bank, meta.addr))
        index = read_chunk_header(sav, seek=gb2cram(meta.bank, profile.prev))
        index = read_index(sav, seek=gb2cram(meta.bank, profile.prev))

        table = [("N", "TITLE", "ADDR", "SIZE", "MARK", "OWNER", "ICON")]
        for i, entry in enumerate(index):
            if entry.addr == 0:
                continue
            elif entry.medium == 0xFF:
                table.append((i, "KISS MAIL", "n/a", "n/a", "◎", "$01", "auto"))
                continue
            assert entry.medium == 0x00

            file = read_file_header(sav, seek=entry.addr)
            icon_kind = BUILTIN_ICONS.get(file.owner, "")
            if file.icon:
                icon_kind = "%dbpp" % (len(file.icon) // 0x60)
            mark = {0x04: "○", 0x06: "◇"}.get(file.flags & 0x06, "△")
            owner = "$%02x" % file.owner
            addr = "$%02x:$%04x" % cram2gb(entry.addr)
            table.append((i, file.title, addr, file.size, mark, owner, icon_kind))

        _columnify(table)


def get_command(parser, args):
    out_path = args.out
    if out_path is None:
        out_path = args.title + ".gbk"

    with open_sav(args, "rb") as (meta, sav):
        profile = read_profile_chunk_header(sav, seek=gb2cram(meta.bank, meta.addr))
        for entry in read_index(sav, seek=gb2cram(meta.bank, profile.prev)):
            if entry.addr > 0 and entry.medium == 0x00:
                file = read_file_header(sav, seek=entry.addr)
                if file.title == args.title:
                    break
        else:
            raise KeyError(args.title)

        sav.seek(entry.addr)
        data = sav.read(file.size)
        with open(out_path, "wb") as out:
            out.write(data)
        print(f"Wrote {file.size} bytes to {out_path}", file=sys.stderr)


def add_command(parser, args):
    raise NotImplementedError()


def move_command(parser, args):
    raise NotImplementedError()


def del_command(parser, args):
    raise NotImplementedError()


def _columnify(table):
    table = [[str(x) for x in row] for row in table]
    widths = [
        max(_strwidth(x or "") for x in col) for col in itertools.zip_longest(*table)
    ]
    for row in table:
        print("  ".join(_ljust(x, w) for w, x in zip(widths, row[:-1])), end="  ")
        print(row[-1])


def _charwidth(ch: str) -> int:
    return {"F": 2, "W": 2}.get(unicodedata.east_asian_width(ch), 1)


def _strwidth(text: str) -> int:
    return sum(_charwidth(ch) for ch in text)


def _ljust(text: str, width: int) -> str:
    return text + (" " * (width - _strwidth(text)))


_chars = dict(
    enumerate(
        "\0abcdefghijklmno"
        "pqrstuvwxyz｢|｣¯\\"
        " !\"#$%&'()*+,-./"
        "0123456789:;<=>?"
        "@ABCDEFGHIJKLMNO"
        "PQRSTUVWXYZ[¥]^_"
        "をあいうえおかきくけこさしすせそ"
        "たちつてとなにぬねのはひふへほま"
        "みむめもやゆよらりるれろわんがぎ"
        "ぐげござじずぜぞだぢづでどばびぶ"
        "べぼぱぴぷぺぽぁぃぅぇぉゃゅょっ"
        "ヲアイウエオカキクケコサシスセソ"
        "タチツテトナニヌネノハヒフヘホマ"
        "ミムメモヤユヨラリルレロワンガギ"
        "グゲごザジズゼゾダヂヅデドバビブ"
        "ベボパピプペポァィゥェォャュョッ"
    )
)

_katakana = {0: "\0"}
_katakana.update(
    enumerate(
        " !\"#$%&'()*+,-./0123456789:;<=>?"
        "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_"
        "\0abcdefghijklmnopqrstuvwxyz｢|｣¯\\",
        start=0x20,
    )
)
_hiragana = dict(_katakana)
_katakana.update(enumerate("ヲァィゥェォャュョッー", start=0xA6))
_katakana.update(enumerate("アイウエオカキクケコサシスセソタチツテトナニヌネノ", start=0xB1))
_katakana.update(enumerate("ハヒフヘホマミムメモヤユヨラリルレロワン", start=0xCA))
_hiragana.update(enumerate("をぁぃぅぇぉゃゅょっー", start=0xA6))
_hiragana.update(enumerate("あいうえおかきくけこさしすせそたちつてとなにぬねの", start=0xB1))
_hiragana.update(enumerate("はひふへほまみむめもやゆよらりるれろわん", start=0xCA))

_charmaps = {0x0E: _katakana, 0x0F: _hiragana}
_diacritics = {
    0xDE: dict(
        zip(
            "カキクケコサシスセソタチツテトハヒフヘホかきくけこさしすせそたちつてとはひふへほ",
            "ガギグゲゴザジズゼゾダヂヅデドバビブベボがぎぐげござじずぜぞだぢづでどばびぶべぼ",
        )
    ),
    0xDF: dict(
        zip(
            "ハヒフヘホはひふへほ",
            "パピプペポぱぴぷぺぽ",
        )
    ),
}


def _no_encode(text: str):
    raise NotImplementedError


def _decode_string(data: bytes):
    charmap = _katakana
    text = ""
    for byte in data:
        if byte in _charmaps:
            charmap = _charmaps[byte]
        elif byte in _diacritics:
            if text[-1:] not in _diacritics[byte]:
                raise UnicodeDecodeError("modifier without valid preceder")
            text = text[:-1] + _diacritics[byte][text[-1:]]
        else:
            if byte not in charmap:
                raise UnicodeDecodeError("invalid byte")
            text += charmap[byte]
    return text, len(text)


def _decode_chars(data: bytes):
    text = "".join(_chars[byte] for byte in data)
    return text, len(text)


def _codec_search(name):
    if name == "gbkiss_string":
        return codecs.CodecInfo(_no_encode, _decode_string, name="gbkiss_string")
    if name == "gbkiss_char":
        return codecs.CodecInfo(_no_encode, _decode_chars, name="gbkiss_char")


codecs.register(_codec_search)


if __name__ == "__main__":
    main()
