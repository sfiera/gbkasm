#!/usr/bin/env python3

import itertools
import sys


def read_byte():
    b = sys.stdin.buffer.read(1)
    if b:
        return b[0]
    raise EOFError


output = bytearray()

flag_idx = None
flag_cnt = 8
run_idx = None
run_cnt = 2


def write_flag(flag):
    global flag_idx, flag_cnt
    if flag_cnt == 8:
        flag_idx = len(output)
        flag_cnt = 0
        output.append(0)
    output[flag_idx] |= ((flag << 7) & 0xFF) >> flag_cnt
    flag_cnt += 1


def write_run(run):
    global run_idx, run_cnt
    if run_cnt == 2:
        run_idx = len(output)
        run_cnt = 0
        output.append(0)
    output[run_idx] |= ((run << 4) & 0xFF) >> (4 * run_cnt)
    run_cnt += 1


def write_lit(lit):
    output.append(lit)


def write_src(src):
    output.append(src)


buffer = bytearray(0x100)
queue = bytearray()
history = []
dst = 0xEF
flush_idx = -1


def flush_until(pos):
    global flush_idx
    while flush_idx < pos:
        write_flag(1)
        write_lit(queue.pop(0))
        flush_idx += 1


for idx in itertools.count():
    try:
        byte = read_byte()
    except EOFError:
        byte = None

    queue.append(byte)

    if history:
        prev = history[-1]
    else:
        prev = {}
    history.append({})
    this = history[-1]

    for off in range(1, 0x100):
        src = (0x100 + dst - off) & 0xFF
        if buffer[src] == byte:
            this[off] = prev.get(off, 0) + 1

    this_off, this_max = max(this.items(), key=lambda kv: (kv[1], kv[0]), default=(0, 0))
    prev_off, prev_max = max(prev.items(), key=lambda kv: (kv[1], kv[0]), default=(0, 0))

    if this_max == 17:
        # Maximum size run.
        # Flush now and restart.
        flush_until(idx - this_max)
        write_flag(0)
        write_src((0x1F0 + idx - this_off - this_max) & 0xFF)
        write_run(this_max - 2)
        queue = []
        history = []
        flush_idx = idx
    elif (this_max <= prev_max) and prev_max >= 2:
        # Previous run ended.
        # Flush it and continue from here.
        flush_until(idx - prev_max - 1)
        write_flag(0)
        write_src((0x1EF + idx - prev_off - prev_max) & 0xFF)
        write_run(prev_max - 2)
        queue[:-1] = []
        history = [{k: 1 for k in this}]
        flush_idx = idx - 1
    elif this_max == prev_max:
        # Equal to previous run.
        # Flush start of previous run and try to continue current run.
        flush_until(idx - this_max - 1)
    elif this_max == None:
        flush_until(idx)

    if byte is None:
        break

    buffer[dst] = byte
    dst = (dst + 1) & 0xFF

sys.stdout.buffer.write(output)
