#!/usr/bin/env python3

import sys


def read(queue, bits):
    mask = (1 << bits) - 1
    if not queue:
        b = sys.stdin.buffer.read(1)
        if not b:
            raise EOFError
        shift = 8 - bits
        for i in range(8 // bits):
            queue.append((b[0] >> shift) & mask)
            shift -= bits
    return queue.pop(0)


def write(byte):
    sys.stdout.buffer.write(bytearray([byte]))


lits, srcs, flags, runs = [], [], [], []
buffer = bytearray(0x100)
dst = 0xEF
try:
    while True:
        if read(flags, 1):
            buffer[dst] = read(lits, 8)
            print(f"1 ${buffer[dst]:02x} → {dst}")
            # write(buffer[dst])
            dst = (dst + 1) & 0xFF
        else:
            src = read(srcs, 8)
            size = 2 + read(runs, 4)
            print(f"{size} [{src}] → {dst}")
            for i in range(size):
                buffer[dst] = buffer[src]
                # write(buffer[dst])
                src = (src + 1) & 0xFF
                dst = (dst + 1) & 0xFF
except EOFError:
    pass
